import Cookies from 'js-cookie';
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import userApi from '../apis/users/userApi';
import * as userAuth from '../apis/users/userAuth';

export const LoginContext = React.createContext();
LoginContext.displayName = 'LoginContextName'

/**
 * Î°úÍ∑∏Ïù∏
 * - Î°úÍ∑∏Ïù∏ Ï≤¥ÌÅ¨
 * - Î°úÍ∑∏Ïù∏ Ï≤¥ÌÅ¨
 * - Î°úÍ∑∏ÏïÑÏõÉ
 * 
 * - Î°úÍ∑∏Ïù∏ ÏÑ∏ÌåÖ
 * - Î°úÍ∑∏ÏïÑÏõÉ ÏÑ∏ÌåÖ
 */
const LoginContextProvider = ({ children }) => {

    /*
        ÏÉÅÌÉú
        - Î°úÍ∑∏Ïù∏ Ïó¨Î∂Ä
        - Ïú†Ï†Ä Ï†ïÎ≥¥
        - Í∂åÌïú Ï†ïÎ≥¥
        - ÏïÑÏïÑÎîî Ï†ÄÏû•
    */

    // Î°úÍ∑∏Ïù∏ Ïó¨Î∂Ä
    const [isLogin, setLogin] = useState(false);

    // Ïú†Ï†Ä Ï†ïÎ≥¥
    const [userInfo, setUserInfo] = useState({});

    // Í∂åÌïú Ï†ïÎ≥¥
    const [roles, setRoles] = useState({ isUser: false, isBand: false, isClub: false });

    // ÏïÑÏù¥Îîî Ï†ÄÏû•
    const [rememberId, setRememberId] = useState();

    // ÏûêÎèô Î°úÍ∑∏Ïù∏
    const [rememberMe, setRememberMe] = useState();

    // ÌéòÏù¥ÏßÄ Ïù¥Îèô
    const navigate = useNavigate();

    /*
        Î°úÍ∑∏Ïù∏ Ï≤¥ÌÅ¨
    */
    const loginCheck = async (isAuthPage = false) => {
        // Ïø†ÌÇ§ÏóêÏÑú jwtÌÜ†ÌÅ∞ Í∞ÄÏ†∏Ïò§Í∏∞
        const accessToken = Cookies.get("accessToken")
        // accessToken(jwt)Ïù¥ ÏóÜÏùå
        console.log(`accessToken : ${accessToken}`);

        // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏöîÏ≤≠
        let response
        let data

        // JWT (accessToken) Ïù¥ ÏóÜÏùå - üíçinüç™ ‚ùå
        // JWT‚ùå AND Ïù∏Ï¶ùÌïÑÏöî‚ùå
        if (!accessToken) {
            console.log(`Ïø†ÌÇ§Ïóê accessToken(jwt)Ïù¥ ÏóÜÏùå`)
            logoutSetting()
            return
        }

        //  JWT‚ùå AND Ïù∏Ï¶ùÌïÑÏöî‚≠ï
        if (!accessToken && isAuthPage) {
            navigate("/login")
        }

        // JWT (accessToken) Ïù¥ ÏûàÏùå - üíçinüç™ ‚≠ï
        console.log(`Ïø†ÌÇ§Ïóê JWT(accessToken) Ïù¥ Ï†ÄÏû•ÎêòÏñ¥ ÏûàÏùå`);
        userApi.defaults.headers.common.Authorization = `Bearer ${accessToken}`


        try {
            response = await userAuth.userInfo()
        } catch (error) {
            console.log(`error :  + ${error}`)
            console.log(`status : ${response.status}`)
            return;
        }
        data = response.data
        console.log(`data : ${data}`)

        // Ïù∏Ï¶ù Ïã§Ìå®
        if (data == 'UNAUTHRIZED' || response.status == 401) {
            console.error(`accessToken (jwt) Ïù¥ ÎßåÎ£åÎêòÏóàÍ±∞ÎÇò Ïù∏Ï¶ùÏóê Ïã§Ìå®ÌïòÏòÄÏäµÎãàÎã§.`);
            return;
        }

        // Ïù∏Ï¶ù ÏÑ±Í≥µ
        console.log(`accessToken (jwt) ÌÜ†ÌÅ∞ÏúºÎ°ú ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ùÏ†ïÎ≥¥`)

        // Î°úÍ∑∏Ïù∏ ÏÑ∏ÌåÖ
        loginSetting(data, accessToken)
    }

    // Î°úÍ∑∏Ïù∏
    const login = async (username, password, rememberId, rememberMe) => {

        console.log(`username : ${username}`)
        console.log(`password : ${password}`)
        console.log(`rememberId : ${rememberId}`)
        console.log(`rememberMe : ${rememberMe}`)

        const response = await userAuth.login(username, password);

        // ÏïÑÏù¥Îîî Ï†ÄÏû•
        if (rememberId) Cookies.set("rememberId", username)
        else Cookies.remove("rememberId")

        // ÏûêÎèô Î°úÍ∑∏Ïù∏
        if (rememberMe) Cookies.set("rememberMe", username)
        else Cookies.remove("rememberMe")

        try {
            const response = await userAuth.login(username, password)
            const data = response.data;
            const status = response.status;
            const headers = response.headers;
            const authorization = headers.authorization;
            const accessToken = authorization.replace("Bearer ", "");

            console.log(`data : ${data}`);
            console.log(`status : ${status}`);
            console.log(`headers : ${headers}`);
            console.log(`jwt : ${accessToken}`);

            // Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ
            if (status === 200) {
                // Î°úÍ∑∏Ïù∏ Ï≤¥ÌÅ¨
                Cookies.set("accessToken", accessToken);

                loginCheck();

                // alert("Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ");

                // ÎùºÏù¥Î∏åÎ≥¥Îìú ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
                navigate("/liveBoard")
            }

        } catch (error) {
            // Î°úÍ∑∏Ïù∏ Ïã§Ìå®
            alert("Î°úÍ∑∏Ïù∏ÏùÑ Ïã§Ìå®ÌñàÏäµÎãàÎã§.")
        }
    }


    // Î°úÍ∑∏ÏïÑÏõÉ
    const logout = () => {
        // const ckeck = window.confirm("Î°úÍ∑∏ÏïÑÏõÉÌïòÏãúÍ≤†ÏäµÎãàÍπå?")

        // if (ckeck) {
        // Î°úÍ∑∏ÏïÑÏõÉ ÏÑ∏ÌåÖ
        logoutSetting();
        // alert('Î°úÍ∑∏ÏïÑÏõÉ ÏÑ∏ÌåÖ ÏôÑÎ£å!!')

        // ÎùºÏù¥Î∏åÎ≥¥Îìú ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
        navigate('/liveBoard')
        // :( Ïù¥Í≤å ÎêòÏßÄ ÏïäÎäî Ïù¥Ïú†???
        // }
    }

    // - Î°úÍ∑∏Ïù∏ ÏÑ∏ÌåÖ
    // userData, accessToken (jwt)
    const loginSetting = (userData, accessToken) => {
        const { username, authList, profileNo, phone } = userData
        const roleList = authList.map((auth) => auth.auth)

        console.log(`username : ${username}`)
        console.log(`authList : ${authList}`)
        console.log(`roleList : ${roleList}`)
        console.log(`profileNo : ${profileNo}`)

        // axios Í∞ùÏ≤¥Ïùò header(Authorization : `Bearer ${accessToken}`)
        userApi.defaults.headers.common.Authorization = `Bearer ${accessToken}`;

        // Ïø†ÌÇ§Ïóê accessToken(jwt) Ï†ÄÏû•
        if(Cookies.get('rememberMe') != null){
            Cookies.set("accessToken", accessToken, {expires:7});
            // Cookies.set("rememberMe", rememberMe, {expires:7});
            // window.alert("rememberMeÍ∞Ä nullÏù¥ ÏïÑÎãê Îïå 7Ïùº ÏÑ§Ï†ï.")
        }else{
            Cookies.set("accessToken", accessToken);
            // window.alert("rememberMeÍ∞Ä nullÏùº Îïå ÏÑ§Ï†ïÌïòÏßÄ ÏïäÏùå.")
        }

        // Î°úÍ∑∏Ïù∏ Ïó¨Î∂Ä : true
        setLogin(true)

        // Ïú†Ï†ÄÏ†ïÎ≥¥ ÏÑ∏ÌåÖ
        const updatedUserInfo = { username, roleList, profileNo, phone }
        setUserInfo(updatedUserInfo)

        // Í∂åÌïú Ï†ïÎ≥¥ ÏÑ∏ÌåÖ
        const updatedRoles = { isUser: false, isBand: false, isClub: false }

        roleList.forEach((role) => {
            // alert("Í∂åÌïú Ï†ïÎ≥¥ ÏÑ∏ÌåÖÏóêÏÑú : " + role)
            switch (role) {
                case 'ROLE_USER':
                    updatedRoles.isUser = true;
                    break;
                case 'ROLE_BAND':
                    updatedRoles.isBand = true;
                    break;
                case 'ROLE_CLUB':
                    updatedRoles.isClub = true;
                    break;
                default:
                    break;
            }
        });

        setRoles(updatedRoles)
    }

    // Î°úÍ∑∏ÏïÑÏõÉ ÏÑ∏ÌåÖ
    const logoutSetting = () => {
        // axios Í∞ùÏ≤¥Ïùò header Ï¥àÍ∏∞Ìôî
        userApi.defaults.headers.common.Authorization = undefined;

        // Ïø†ÌÇ§Ïóê accessToken(jwt) Ï¥àÍ∏∞Ìôî
        Cookies.remove("accessToken")
        Cookies.remove("rememberMe")

        // Î°úÍ∑∏Ïù∏ Ïó¨Î∂Ä : false
        setLogin(false)

        // Ïú†Ï†ÄÏ†ïÎ≥¥ Ï¥àÍ∏∞Ìôî
        setUserInfo(null)

        // Í∂åÌïú Ï†ïÎ≥¥ Ï¥àÍ∏∞Ìôî
        setRoles({ isUser: false, isBand: false, isClub: false })
    }

    useEffect(() => {
        // Î°úÍ∑∏Ïù∏ Ï≤¥ÌÅ¨
        loginCheck()
    }, [])

    return (
        <div>
            <LoginContext.Provider value={{ isLogin, userInfo, roles, login, logout, loginCheck }}>
                {children}
            </LoginContext.Provider>
        </div>
    )
}

export default LoginContextProvider